'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'position_x',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'position_y',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'position_z',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'position_spindle',
'+/Channel/!RP/rpa [u1; 15]' = 'Recording_flag'
)
data <- list()
for (file in csv_files){
df <- read_csv(file, col_names = TRUE, show_col_types = FALSE)
# Obtener nombres de columnas presentes en el archivo y que están en el diccionario
columns_to_rename <- intersect(names(df), names(column_mapping))
# Renombrar las columnas solo si coinciden con el diccionario
if (length(columns_to_rename) > 0) {
df <- df %>%
rename_with(~ column_mapping[.x], .cols = columns_to_rename)
}
df$file_path <- file
file_path_parts <- str_split(file, "/")[[1]]
df$file_name <- file_path_parts[length(file_path_parts)]
df$file_dir <- file_path_parts[length(file_path_parts) - 1]
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, cache.lazy = FALSE)
library(tidyverse)
library(kableExtra)
options(scipen = 999)
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
column_mapping <- c(
'time' = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'torque_x',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'torque_y',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'torque_z',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'torque_spindle',
#'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
#'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
#'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
#'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
#'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
#'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'position_x',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'position_y',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'position_z',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'position_spindle',
'+/Channel/!RP/rpa [u1; 15]' = 'Recording_flag'
)
data <- list()
for (file in csv_files){
df <- read_csv(file, col_names = TRUE, show_col_types = FALSE)
# Obtener nombres de columnas presentes en el archivo y que están en el diccionario
columns_to_rename <- intersect(names(df), names(column_mapping))
# Renombrar las columnas solo si coinciden con el diccionario
if (length(columns_to_rename) > 0) {
df <- df %>%
rename_with(~ column_mapping[.x], .cols = columns_to_rename)
}
df$file_path <- file
file_path_parts <- str_split(file, "/")[[1]]
df$file_name <- file_path_parts[length(file_path_parts)]
df$file_dir <- file_path_parts[length(file_path_parts) - 1]
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
selected_columns <- c(unname(column_mapping), "file_path", "file_dir",
"file_name", "time_increment")
combined_data <- bind_rows(data) %>%
select(any_of(selected_columns))
combined_data %>%
as.data.frame() %>%
str()
data.frame(
Faltantes = colSums(is.na(combined_data)),
Porcentaje = round(colSums(is.na(combined_data))/nrow(combined_data)*100, 2)) %>%
kable() %>%
kable_styling(font_size = 20)
clean_data <-
combined_data %>%
select(-c("torque_z", "position_x", "Recording_flag")) %>%
drop_na()
data.frame(
file_dir = unique(clean_data$file_dir)
) %>%
filter(!grepl("^Level_[0-9]{3}$", file_dir))  %>%
kable() %>%
kable_styling(font_size = 20)
clean_data <-
clean_data %>%
filter(grepl("^Level_[0-9]{3}$", file_dir)) %>%
arrange(file_dir, file_name, time)
clean_data <-
clean_data %>%
group_by(file_dir) %>%
mutate(level_time = cumsum(time_increment)) %>%
ungroup() %>%
mutate(total_time = cumsum(time_increment))
clean_data %>%
select(file_dir, level_time, total_time) %>%
as.data.frame() %>%
head() %>%
kable() %>%
kable_styling(font_size = 20)
clean_data %>%
select(file_dir, level_time, total_time) %>%
mutate(total_time = sprintf("%.3f", total_time)) %>%
as.data.frame() %>%
tail() %>%
kable() %>%
kable_styling(font_size = 20)
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle", "position_y",
"position_z", "position_spindle")) %>%
reframe(
variable = colnames(.),
min = sapply(., min, na.rm = TRUE),
Q1 = sapply(., quantile, probs = 0.25, na.rm = TRUE),
mean = colMeans(., na.rm = TRUE),
median = sapply(., median, na.rm = TRUE),
Q3 = sapply(., quantile, probs = 0.75, na.rm = TRUE),
max = sapply(., max, na.rm = TRUE),
sd = sapply(., sd, na.rm = TRUE)) %>%
mutate_if(is.numeric, round, 2) %>%
as.data.frame() %>%
kable() %>%
kable_styling(font_size = 20)
prueba <- clean_data %>% skimr::skim()
View(prueba)
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle", "position_y",
"position_z", "position_spindle")) %>%
skimr::skim()
stats <-
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle", "position_y",
"position_z", "position_spindle")) %>%
skimr::skim()
stats %>%
as.data.frame() %>%
kable() %>%
kable_styling(font_size = 20)
View(stats)
stats %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
mutate_if(is.numeric, round, 2) %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
mutate_if(is.numeric, round, 2) %>%
rename_with(~ gsub("^numeric\\.", "", .), starts_with("numeric.")) %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
mutate_if(is.numeric, round, 2) %>%
rename_with(~ gsub("^numeric\\.", "", .), starts_with("numeric.")) %>%
rename(skim_variable = variable) %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
mutate_if(is.numeric, round, 2) %>%
rename_with(~ gsub("^numeric\\.", "", .), starts_with("numeric.")) %>%
rename(variable = skim_variable) %>%
kable() %>%
kable_styling(font_size = 20)
library(skimr)
stats <-
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle", "position_y",
"position_z", "position_spindle")) %>%
skim()
glimpse(combined_data)
prueba <- glimpse(combined_data)
View(prueba)
combined_data %>%
glimpse() %>%
head()
combined_data %>%
glimpse() %>%
head()
prueba <- combined_data %>%
str()
prueba <- combined_data %>%
str()
combined_data %>%
as.data.frame() %>%
str()
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, cache.lazy = FALSE)
library(tidyverse)
library(kableExtra)
library(skimr)
options(scipen = 999)
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, cache.lazy = FALSE)
library(tidyverse)
library(kableExtra)
library(skimr)
options(scipen = 999)
clean_data %>%
select(file_dir, level_time, total_time) %>%
as.data.frame() %>%
head() %>%
kable() %>%
kable_styling(font_size = 20)
clean_data %>%
select(file_dir, level_time, total_time) %>%
mutate(total_time = sprintf("%.3f", total_time)) %>%
as.data.frame() %>%
tail() %>%
kable() %>%
kable_styling(font_size = 20)
data.frame(
Missing = colSums(is.na(combined_data)),
"%" = round(colSums(is.na(combined_data))/nrow(combined_data)*100, 2)) %>%
kable() %>%
kable_styling(font_size = 20)
data.frame(
Missing = colSums(is.na(combined_data)),
Percent = round(colSums(is.na(combined_data))/nrow(combined_data)*100, 2)) %>%
kable() %>%
kable_styling(font_size = 20)
all_data <- as.data.frame(combined_data)
all_data <- as.data.frame(clean_data)
rm(all_data)
View(clean_data)
prueba <- clean_data %>%
mutate(time_bin = floor(level_time / time_window)*.5)
time_window <- 15000
prueba <- clean_data %>%
mutate(time_bin = floor(level_time / time_window)*.5)
View(prueba)
View(prueba)
time_window <- 1500
prueba <- clean_data %>%
mutate(time_bin = floor(level_time / time_window)*.5)
unique(prueba$time_bin)
time_window <- 5
prueba <- clean_data %>%
mutate(time_bin = floor(level_time / time_window)*.5)
prueba <-
clean_data %>%
mutate(across(where(is.numeric), scale))
View(prueba)
names(clean_data)
prueba <-
clean_data %>%
mutate(torque_x_scale = scale(torque_x),
torque_y_scale = scale(torque_y),
torque_spindle_scale = scale(torque_spindle),
position_y_scale = scale(position_y),
position_z_scale = scale(position_z),
position_spindle_scale = scale(position_spindle))
View(prueba)
correlations <-
prueba %>%
select(c("torque_x_scale", "torque_y_scale", "torque_spindle_scale",
"position_y_scale", "position_z_scale", "position_spindle_scale")) %>%
cor()
View(correlations)
correlations <-
prueba %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
cor()
correlations_scale <-
prueba %>%
select(c("torque_x_scale", "torque_y_scale", "torque_spindle_scale",
"position_y_scale", "position_z_scale", "position_spindle_scale")) %>%
cor()
View(correlations_scale)
View(prueba)
prueba <-
clean_data %>%
mutate(torque_x_scale = scale(torque_x),
torque_y_scale = scale(torque_y),
torque_spindle_scale = scale(torque_spindle),
position_y_scale = scale(position_y),
position_z_scale = scale(position_z),
position_spindle_scale = scale(position_spindle))
ggplot(data = melt(correlations), aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
labs(title = "Correlation matrix",
x = "Variables",
y = "Variables") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install.packages("heatmaply")
library(heatmaply)
heatmaply(correlations)
heatmaply(correlations)
library(corrplot)
corrplot(correlations, method = "number", type = "upper", tl.col = "black", tl.srt = 45)
corrplot(correlations, method = "number", type = "upper", tl.col = "black", tl.srt = 45)
corrplot(correlations, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
corrplot(correlations, method = "number", tl.col = "black", tl.srt = 45)
corrplot(correlations, method = "number", type = "upper", tl.col = "black", tl.srt = 45)
corrplot(correlations_scale, method = "number", type = "upper", tl.col = "black", tl.srt = 45)
correlations <-
prueba %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
cor()
correlations <-
prueba %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
cor()
corrplot(correlations, method = "number", type = "upper", tl.col = "black", tl.srt = 45)
View(clean_data)
ggplot(clean_data, aes(x = torque_x)) +
geom_density(fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Spindle Torque", x = "Spindle Torque") +
theme_minimal()
rm(prueba)
correlations <-
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
cor()
corrplot(correlations, method = "number", type = "upper", tl.col = "black", tl.srt = 45)
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
cor() %>%
corrplot(method = "number", type = "upper", tl.col = "black", tl.srt = 45)
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value, fill = Variable)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plots of Selected Variables",
x = "Value",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank())
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value, fill = Variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~Variable, scales = "free") +
labs(title = "Density Plots of Selected Variables",
x = "Value",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank())
clean_data %>%
select(c(
"position_y", "position_z", "position_spindle")) %>%
cor() %>%
corrplot(method = "number", type = "upper", tl.col = "black", tl.srt = 45)
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
cor() %>%
corrplot(method = "number", type = "upper", tl.col = "black", tl.srt = 45)
clean_data %>%
filter(total_time %% .008 == 0) %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value, fill = Variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~Variable, scales = "free") +
labs(title = "Density Plots of Selected Variables",
x = "Value",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank())
clean_data %>%
filter(total_time %% .016 == 0) %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value, fill = Variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~Variable, scales = "free") +
labs(title = "Density Plots of Selected Variables",
x = "Value",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank())
clean_data %>%
filter(level_time %% .016 == 0) %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value, fill = Variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~Variable, scales = "free") +
labs(title = "Density Plots of Selected Variables",
x = "Value",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank())
clean_data %>%
filter(level_time %% .008 == 0) %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value, fill = Variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~Variable, scales = "free") +
labs(title = "Density Plots of Selected Variables",
x = "Value",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank())
clean_data %>%
filter(level_time %% .008 == 0) %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value, fill = Variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~Variable, scales = "free") +
labs(title = "Density Plots of Selected Variables",
x = "Value",
y = "Density") +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(clean_data, aes(x = total_time, y = torque_x)) +
geom_line() +
labs(title = "Torque X vs. Total Time",
x = "Total Time",
y = "Torque X") +
theme_minimal()
pca <- prcomp(clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
scale())
fviz_pca_var(pca, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
??fviz_pca_var
library(factoextra)
fviz_pca_var(pca, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
prcomp(clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
scale()) %>%
fviz_pca_var(pca, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
prcomp(clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
scale()) %>%
fviz_pca_var(pca, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
pca <- clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
prcomp(scale = TRUE)
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
prcomp(scale = TRUE) %>%
fviz_pca_var(col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
cor() %>%
corrplot(method = "number", type = "upper", tl.col = "black", tl.srt = 45)
clean_data %>%
filter(level_time %% .008 == 0) %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
prcomp(scale = TRUE) %>%
fviz_pca_var(col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
clean_data %>%
filter(level_time %% .016 == 0) %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
prcomp(scale = TRUE) %>%
fviz_pca_var(col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
rm(pca)
rm(time_window)
?fviz_pca_var
clean_data %>%
filter(level_time %% .016 == 0) %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
prcomp(scale = TRUE) %>%
fviz_pca_var(col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
title = "PCA - .016")
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
prcomp(scale = TRUE) %>%
fviz_contrib(choice = "var", axes = 1, top = 10, title = "PCA - .002 s"))
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle",
"position_y", "position_z", "position_spindle")) %>%
prcomp(scale = TRUE) %>%
fviz_contrib(choice = "var", axes = 1, top = 10, title = "PCA - .002 s")
quarto render Presentación.qmd --to pdf
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, cache.lazy = FALSE)
library(tidyverse)
library(kableExtra)
library(skimr)
library(corrplot)
library(factoextra)
options(scipen = 999)
prueba<-combined_data %>%
as.data.frame() %>%
str()
