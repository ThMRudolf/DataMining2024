alpha_mc <- beta_dist_mc$alpha
beta_mc <- beta_dist_mc$alpha
m_kc <- m_kc
sd_kc <- sd_kc
View(selected_signal_level)
Mc_real4STAN <- na.omit(selected_signal_level$torque_spindle_bpass)
Mc_real4STAN_min <-min( Mc_real4STAN)
Mc_real4STAN_max <-max( Mc_real4STAN)
off_Mc = (Mc_real4STAN_max - Mc_real4STAN_min)/2
idx <- which(abs(Mc_real4STAN)>Mc_real4STAN_max*.2)
Mc_real4STAN2Eval <- Mc_real4STAN[idx]
Mc_real4STAN2Eval <- (Mc_real4STAN2Eval + off_Mc)*1
# Converts degrees to radians
phi_list <- lim22pi((selected_signal_level$torque_spindle-selected_signal_level$torque_spindle[1])*pi/180)
phi_real <- phi_list[[1]]
phi_real2Eval <- na.omit(phi_real[idx])
STAN_data_mill_cont <- list(k = length(Mc_real4STAN2Eval),
Mc = Mc_real4STAN2Eval,
phi = phi_real2Eval,
ap = ap,
fz = fz,
z  = z,
rtool = rtool,
kappa = kappa,
m_kc = m_kc,
#tau_kc = 1/(sd_kc)^2,
alpha_mc = beta_dist_mc$alpha,
beta_mc = beta_dist_mc$beta
)
sample_iteration = 1e3
model_fit <- stan("kienzle.stan",
data = STAN_data_mill_cont,
chain = 1,
iter = sample_iteration,
warmup = sample_iteration/2,
#refresh = sample_iteration/10,
cores = 10,
thin = 1)
model_fit <- stan("kienzle.stan",
data = STAN_data_mill_cont,
chain = 1,
iter = sample_iteration,
warmup = sample_iteration/2,
#refresh = sample_iteration/10,
cores = 30,
thin = 1)
?stan
library(parallel)
sample_iteration = 1e3
model_fit <- stan("kienzle.stan",
data = STAN_data_mill_cont,
chain = 1,
iter = sample_iteration,
warmup = sample_iteration/2,
#refresh = sample_iteration/10,
cores = 30,
thin = 1)
detectCores()
sample_iteration = 1e3
model_fit <- stan("kienzle.stan",
data = STAN_data_mill_cont,
chain = 1,
iter = sample_iteration,
warmup = sample_iteration/2,
#refresh = sample_iteration/10,
cores = 32,
thin = 1)
print(model_fit)
stan_dens(model_fit)
View(model_fit)
#
posterior_samples <- extract(model_fit)
#
posterior_samples <- extract(model_fit)
#
posterior_samples <- extract(model_fit)
#
post_mkc11_STAN <- mean(posterior_samples$kc11)
#
posterior_samples <- extract(model_fit)
library(rstan)
#
posterior_samples <- extract(model_fit)
#
posterior_samples <- rstan::extract(model_fit)
#
post_mkc11_STAN <- mean(posterior_samples$kc11)
post_sdkc11_STAN <- sd(posterior_samples$kc11)
#
post_kc11_STAN <- dnorm(xnorm, post_mkc11_STAN, post_sdkc11_STAN )
post_kc11_STAN <- dnorm(x_norm, post_mkc11_STAN, post_sdkc11_STAN )
post_mmc_STAN <- mean(posterior_samples$mc)
post_sdmc_STAN <- sd(posterior_samples$mc)
post_beta_mc <- beta_dist_param(post_mmc_STAN, post_sdmc_STAN^2)
post_beta_dist_mc_STAN <- dbeta(x, post_beta_mc$alpha, post_beta_mc$beta)
post_beta_dist_mc_STAN <- dbeta(x_beta, post_beta_mc$alpha, post_beta_mc$beta)
df_prior_dist <- df_prior_dist %>% mutate(post_beta_dist_mc_STAN,
post_kc11_STAN)
mc_post <- mc_prior %>% mutate(mc_post = post_beta_dist_mc_STAN)
View(mc_post)
kc_post <- kc_prior %>% mutate(kc_post = post_kc11_STAN)
ggplot(mc_post) +
geom_line(aes(x=x, y = mc_post, color="mc posterior")) +
geom_line(aes(x=x, y = f, color="mc prior"))
ggplot(mc_post) +
geom_line(aes(x=x, y = mc_post, color="mc posterior")) +
geom_line(aes(x=x, y = f, color="mc prior"))
ggplot(kc_post) +
geom_line(aes(x=x, y = kc_post, color="kc posterior")) +
geom_line(aes(x=x, y = f, color="kc prior"))
sample_iteration = 1e3
model_fit <- stan("kienzle.stan",
data = STAN_data_mill_cont,
chain = 1,
iter = sample_iteration,
warmup = sample_iteration/2,
#refresh = sample_iteration/10,
cores = 32,
thin = 1)
print(model_fit)
stan_dens(model_fit)
posterior_samples <- rstan::extract(model_fit)
post_mkc11_STAN <- mean(posterior_samples$kc11)
post_sdkc11_STAN <- sd(posterior_samples$kc11)
post_kc11_STAN <- dnorm(x_norm, post_mkc11_STAN, post_sdkc11_STAN )
post_mmc_STAN <- mean(posterior_samples$mc)
post_sdmc_STAN <- sd(posterior_samples$mc)
post_beta_mc <- beta_dist_param(post_mmc_STAN, post_sdmc_STAN^2)
post_beta_dist_mc_STAN <- dbeta(x_beta, post_beta_mc$alpha, post_beta_mc$beta)
mc_post <- mc_prior %>% mutate(mc_post = post_beta_dist_mc_STAN)
kc_post <- kc_prior %>% mutate(kc_post = post_kc11_STAN)
ggplot(mc_post) +
geom_line(aes(x=x, y = mc_post, color="mc posterior")) +
geom_line(aes(x=x, y = f, color="mc prior"))
ggplot(kc_post) +
geom_line(aes(x=x, y = kc_post, color="kc posterior")) +
geom_line(aes(x=x, y = f, color="kc prior"))
post_mmc_STAN
post_mkc11_STAN
sample_iteration = 1e3
model_fit <- stan("kienzle.stan",
data = STAN_data_mill_cont,
chain = 1,
iter = sample_iteration,
warmup = sample_iteration/2,
#refresh = sample_iteration/10,
cores = 32,
thin = 1)
print(model_fit)
stan_dens(model_fit)
posterior_samples <- rstan::extract(model_fit)
post_mkc11_STAN <- mean(posterior_samples$kc11)
post_sdkc11_STAN <- sd(posterior_samples$kc11)
post_kc11_STAN <- dnorm(x_norm, post_mkc11_STAN, post_sdkc11_STAN )
post_mmc_STAN <- mean(posterior_samples$mc)
post_sdmc_STAN <- sd(posterior_samples$mc)
post_beta_mc <- beta_dist_param(post_mmc_STAN, post_sdmc_STAN^2)
post_beta_dist_mc_STAN <- dbeta(x_beta, post_beta_mc$alpha, post_beta_mc$beta)
mc_post <- mc_prior %>% mutate(mc_post = post_beta_dist_mc_STAN)
kc_post <- kc_prior %>% mutate(kc_post = post_kc11_STAN)
ggplot(mc_post) +
geom_line(aes(x=x, y = mc_post, color="mc posterior")) +
geom_line(aes(x=x, y = f, color="mc prior"))
ggplot(kc_post) +
geom_line(aes(x=x, y = kc_post, color="kc posterior")) +
geom_line(aes(x=x, y = f, color="kc prior"))
post_mmc_STAN
post_mkc11_STAN
selected_signal_filtered <-
selected_signal_level %>%
filter(level_time %% .008 == 0)
View(selected_signal_filtered)
selected_signal_filtered <-
selected_signal %>%
filter(level_time %% .008 == 0)
Mc_real4STAN <- na.omit(selected_signal_filtered$torque_spindle_bpass)
Mc_real4STAN_min <-min( Mc_real4STAN)
Mc_real4STAN_max <-max( Mc_real4STAN)
off_Mc = (Mc_real4STAN_max - Mc_real4STAN_min)/2
idx <- which(abs(Mc_real4STAN)>Mc_real4STAN_max*.2)
Mc_real4STAN2Eval <- Mc_real4STAN[idx]
Mc_real4STAN2Eval <- (Mc_real4STAN2Eval + off_Mc)*1
# Converts degrees to radians
phi_list <- lim22pi((selected_signal_filtered$torque_spindle-selected_signal_filtered$torque_spindle[1])*pi/180)
phi_real <- phi_list[[1]]
phi_real2Eval <- na.omit(phi_real[idx])
STAN_data_mill_cont <- list(k = length(Mc_real4STAN2Eval),
Mc = Mc_real4STAN2Eval,
phi = phi_real2Eval,
ap = ap,
fz = fz,
z  = z,
rtool = rtool,
kappa = kappa,
m_kc = m_kc,
#tau_kc = 1/(sd_kc)^2,
alpha_mc = beta_dist_mc$alpha,
beta_mc = beta_dist_mc$beta
)
sample_iteration = 1e3
model_fit <- stan("kienzle.stan",
data = STAN_data_mill_cont,
chain = 1,
iter = sample_iteration,
warmup = sample_iteration/2,
#refresh = sample_iteration/10,
cores = 32,
thin = 1)
print(model_fit)
stan_dens(model_fit)
posterior_samples <- rstan::extract(model_fit)
post_mkc11_STAN <- mean(posterior_samples$kc11)
post_sdkc11_STAN <- sd(posterior_samples$kc11)
post_kc11_STAN <- dnorm(x_norm, post_mkc11_STAN, post_sdkc11_STAN )
post_mmc_STAN <- mean(posterior_samples$mc)
post_sdmc_STAN <- sd(posterior_samples$mc)
post_beta_mc <- beta_dist_param(post_mmc_STAN, post_sdmc_STAN^2)
post_beta_dist_mc_STAN <- dbeta(x_beta, post_beta_mc$alpha, post_beta_mc$beta)
mc_post <- mc_prior %>% mutate(mc_post = post_beta_dist_mc_STAN)
kc_post <- kc_prior %>% mutate(kc_post = post_kc11_STAN)
ggplot(mc_post) +
geom_line(aes(x=x, y = mc_post, color="mc posterior")) +
geom_line(aes(x=x, y = f, color="mc prior"))
ggplot(kc_post) +
geom_line(aes(x=x, y = kc_post, color="kc posterior")) +
geom_line(aes(x=x, y = f, color="kc prior"))
post_mmc_STAN
post_mkc11_STAN
ap <- 0.001  # cutting depth in m
fz <- 0.00015 # feed per tooth in m
kappa <- 105/180*pi # main angle of tool insert in degree
z <- 3     # number of cutting edges [2, 3, 4]
rtool <- 0.040/2# tool radius in m
alpha_mc <- beta_dist_mc$alpha
beta_mc <- beta_dist_mc$alpha
m_kc <- m_kc
sd_kc <- sd_kc
selected_signal_filtered <-
selected_signal %>%
filter(level_time %% .002 == 0)
selected_signal_filtered <- selected_signal[seq(1,
nrow(selected_signal), by = 4),
]
selected_signal_filtered <- selected_signal[seq(1,
nrow(selected_signal), by = 4),
]
ap <- 0.001  # cutting depth in m
fz <- 0.00015 # feed per tooth in m
kappa <- 105/180*pi # main angle of tool insert in degree
z <- 3     # number of cutting edges [2, 3, 4]
rtool <- 0.040/2# tool radius in m
alpha_mc <- beta_dist_mc$alpha
beta_mc <- beta_dist_mc$alpha
m_kc <- m_kc
sd_kc <- sd_kc
Mc_real4STAN <- na.omit(selected_signal_filtered$torque_spindle_bpass)
Mc_real4STAN_min <-min( Mc_real4STAN)
Mc_real4STAN_max <-max( Mc_real4STAN)
off_Mc = (Mc_real4STAN_max - Mc_real4STAN_min)/2
idx <- which(abs(Mc_real4STAN)>Mc_real4STAN_max*.2)
Mc_real4STAN2Eval <- Mc_real4STAN[idx]
Mc_real4STAN2Eval <- (Mc_real4STAN2Eval + off_Mc)*1
# Converts degrees to radians
phi_list <- lim22pi((selected_signal_filtered$torque_spindle-selected_signal_filtered$torque_spindle[1])*pi/180)
phi_real <- phi_list[[1]]
phi_real2Eval <- na.omit(phi_real[idx])
STAN_data_mill_cont <- list(k = length(Mc_real4STAN2Eval),
Mc = Mc_real4STAN2Eval,
phi = phi_real2Eval,
ap = ap,
fz = fz,
z  = z,
rtool = rtool,
kappa = kappa,
m_kc = m_kc,
#tau_kc = 1/(sd_kc)^2,
alpha_mc = beta_dist_mc$alpha,
beta_mc = beta_dist_mc$beta
)
sample_iteration = 1e3
model_fit <- stan("kienzle.stan",
data = STAN_data_mill_cont,
chain = 1,
iter = sample_iteration,
warmup = sample_iteration/2,
#refresh = sample_iteration/10,
cores = 32,
thin = 1)
print(model_fit)
stan_dens(model_fit)
posterior_samples <- rstan::extract(model_fit)
post_mkc11_STAN <- mean(posterior_samples$kc11)
post_sdkc11_STAN <- sd(posterior_samples$kc11)
post_kc11_STAN <- dnorm(x_norm, post_mkc11_STAN, post_sdkc11_STAN )
post_mmc_STAN <- mean(posterior_samples$mc)
post_sdmc_STAN <- sd(posterior_samples$mc)
post_beta_mc <- beta_dist_param(post_mmc_STAN, post_sdmc_STAN^2)
post_beta_dist_mc_STAN <- dbeta(x_beta, post_beta_mc$alpha, post_beta_mc$beta)
mc_post <- mc_prior %>% mutate(mc_post = post_beta_dist_mc_STAN)
kc_post <- kc_prior %>% mutate(kc_post = post_kc11_STAN)
ggplot(mc_post) +
geom_line(aes(x=x, y = mc_post, color="mc posterior")) +
geom_line(aes(x=x, y = f, color="mc prior"))
ggplot(kc_post) +
geom_line(aes(x=x, y = kc_post, color="kc posterior")) +
geom_line(aes(x=x, y = f, color="kc prior"))
post_mmc_STAN
post_mkc11_STAN
post_mmc_STAN
post_mkc11_STAN
post_mmc_STAN
post_mkc11_STAN
results <- list()
unique_levels <- unique(selected_signal_filtered$file_dir)
unique_levels
# Function to run the STAN model for each file_dir
run_stan_model <- function(dir, data) {
# Filter data for the current file_dir
selected_signal_filtered <- data %>% filter(file_dir == dir)
# Prepare data for STAN model
Mc_real4STAN <- na.omit(selected_signal_filtered$torque_spindle_bpass)
Mc_real4STAN_min <- min(Mc_real4STAN)
Mc_real4STAN_max <- max(Mc_real4STAN)
off_Mc <- (Mc_real4STAN_max - Mc_real4STAN_min) / 2
idx <- which(abs(Mc_real4STAN) > Mc_real4STAN_max * 0.2)
Mc_real4STAN2Eval <- Mc_real4STAN[idx]
Mc_real4STAN2Eval <- (Mc_real4STAN2Eval + off_Mc) * 1
# Convert degrees to radians
phi_list <- lim22pi((selected_signal_filtered$torque_spindle -
selected_signal_filtered$torque_spindle[1]) * pi / 180)
phi_real <- phi_list[[1]]
phi_real2Eval <- na.omit(phi_real[idx])
# Prepare STAN data
STAN_data_mill_cont <- list(
k = length(Mc_real4STAN2Eval),
Mc = Mc_real4STAN2Eval,
phi = phi_real2Eval,
ap = ap,
fz = fz,
z  = z,
rtool = rtool,
kappa = kappa,
m_kc = m_kc,
alpha_mc = beta_dist_mc$alpha,
beta_mc = beta_dist_mc$beta
)
# Run STAN model
sample_iteration <- 1e3
model_fit <- stan(
file = "kienzle.stan",
data = STAN_data_mill_cont,
chains = 1,
iter = sample_iteration,
warmup = sample_iteration / 2,
cores = 1,
thin = 1
)
# Extract posterior samples
posterior_samples <- rstan::extract(model_fit)
# Calculate posterior means and standard deviations
post_mkc11_STAN <- mean(posterior_samples$kc11)
post_sdkc11_STAN <- sd(posterior_samples$kc11)
post_kc11_STAN <- dnorm(x_norm, post_mkc11_STAN, post_sdkc11_STAN)
post_mmc_STAN <- mean(posterior_samples$mc)
post_sdmc_STAN <- sd(posterior_samples$mc)
post_beta_mc <- beta_dist_param(post_mmc_STAN, post_sdmc_STAN^2)
post_beta_dist_mc_STAN <- dbeta(x_beta, post_beta_mc$alpha, post_beta_mc$beta)
# Return the result as a data frame
data.frame(
file_dir = dir,
post_mmc_STAN = post_mmc_STAN,
post_mkc11_STAN = post_mkc11_STAN
)
}
# Use map_dfr to apply the function over all unique file_dir and combine results
results_df <- purrr::map_dfr(unique(selected_signal_filtered$file_dir),
run_stan_model,
data = selected_signal_filtered)
selected_signal_sub <- selected_signal[seq(1,
nrow(selected_signal), by = 4),
]
# Function to run the STAN model for each file_dir
run_stan_model <- function(dir, data) {
# Filter data for the current file_dir
selected_signal_filtered <- data %>% filter(file_dir == dir)
# Prepare data for STAN model
Mc_real4STAN <- na.omit(selected_signal_filtered$torque_spindle_bpass)
Mc_real4STAN_min <- min(Mc_real4STAN)
Mc_real4STAN_max <- max(Mc_real4STAN)
off_Mc <- (Mc_real4STAN_max - Mc_real4STAN_min) / 2
idx <- which(abs(Mc_real4STAN) > Mc_real4STAN_max * 0.2)
Mc_real4STAN2Eval <- Mc_real4STAN[idx]
Mc_real4STAN2Eval <- (Mc_real4STAN2Eval + off_Mc) * 1
# Convert degrees to radians
phi_list <- lim22pi((selected_signal_filtered$torque_spindle -
selected_signal_filtered$torque_spindle[1]) * pi / 180)
phi_real <- phi_list[[1]]
phi_real2Eval <- na.omit(phi_real[idx])
# Prepare STAN data
STAN_data_mill_cont <- list(
k = length(Mc_real4STAN2Eval),
Mc = Mc_real4STAN2Eval,
phi = phi_real2Eval,
ap = ap,
fz = fz,
z  = z,
rtool = rtool,
kappa = kappa,
m_kc = m_kc,
alpha_mc = beta_dist_mc$alpha,
beta_mc = beta_dist_mc$beta
)
# Run STAN model
sample_iteration <- 1e3
model_fit <- stan(
file = "kienzle.stan",
data = STAN_data_mill_cont,
chains = 1,
iter = sample_iteration,
warmup = sample_iteration / 2,
cores = 1,
thin = 1
)
# Extract posterior samples
posterior_samples <- rstan::extract(model_fit)
# Calculate posterior means and standard deviations
post_mkc11_STAN <- mean(posterior_samples$kc11)
post_sdkc11_STAN <- sd(posterior_samples$kc11)
post_kc11_STAN <- dnorm(x_norm, post_mkc11_STAN, post_sdkc11_STAN)
post_mmc_STAN <- mean(posterior_samples$mc)
post_sdmc_STAN <- sd(posterior_samples$mc)
post_beta_mc <- beta_dist_param(post_mmc_STAN, post_sdmc_STAN^2)
post_beta_dist_mc_STAN <- dbeta(x_beta, post_beta_mc$alpha, post_beta_mc$beta)
# Return the result as a data frame
data.frame(
file_dir = dir,
post_mmc_STAN = post_mmc_STAN,
post_mkc11_STAN = post_mkc11_STAN
)
}
# Use map_dfr to apply the function over all unique file_dir and combine results
results_df <- purrr::map_dfr(unique(selected_signal_sub$file_dir),
run_stan_model,
data = selected_signal_sub)
# Function to run the STAN model for each file_dir
run_stan_model <- function(dir, data) {
cat("Processing file_dir:", dir, "\n")
# Filter data for the current file_dir
selected_signal_filtered <- data %>% filter(file_dir == dir)
# Prepare data for STAN model
Mc_real4STAN <- na.omit(selected_signal_filtered$torque_spindle_bpass)
Mc_real4STAN_min <- min(Mc_real4STAN)
Mc_real4STAN_max <- max(Mc_real4STAN)
off_Mc <- (Mc_real4STAN_max - Mc_real4STAN_min) / 2
idx <- which(abs(Mc_real4STAN) > Mc_real4STAN_max * 0.2)
Mc_real4STAN2Eval <- Mc_real4STAN[idx]
Mc_real4STAN2Eval <- (Mc_real4STAN2Eval + off_Mc) * 1
# Convert degrees to radians
phi_list <- lim22pi((selected_signal_filtered$torque_spindle -
selected_signal_filtered$torque_spindle[1]) * pi / 180)
phi_real <- phi_list[[1]]
phi_real2Eval <- na.omit(phi_real[idx])
# Prepare STAN data
STAN_data_mill_cont <- list(
k = length(Mc_real4STAN2Eval),
Mc = Mc_real4STAN2Eval,
phi = phi_real2Eval,
ap = ap,
fz = fz,
z  = z,
rtool = rtool,
kappa = kappa,
m_kc = m_kc,
alpha_mc = beta_dist_mc$alpha,
beta_mc = beta_dist_mc$beta
)
# Run STAN model
sample_iteration <- 1e3
model_fit <- stan(
file = "kienzle.stan",
data = STAN_data_mill_cont,
chains = 1,
iter = sample_iteration,
warmup = sample_iteration / 2,
cores = 1,
thin = 1
)
# Extract posterior samples
posterior_samples <- rstan::extract(model_fit)
# Calculate posterior means and standard deviations
post_mkc11_STAN <- mean(posterior_samples$kc11)
post_sdkc11_STAN <- sd(posterior_samples$kc11)
post_kc11_STAN <- dnorm(x_norm, post_mkc11_STAN, post_sdkc11_STAN)
post_mmc_STAN <- mean(posterior_samples$mc)
post_sdmc_STAN <- sd(posterior_samples$mc)
post_beta_mc <- beta_dist_param(post_mmc_STAN, post_sdmc_STAN^2)
post_beta_dist_mc_STAN <- dbeta(x_beta, post_beta_mc$alpha, post_beta_mc$beta)
# Return the result as a data frame
data.frame(
file_dir = dir,
post_mmc_STAN = post_mmc_STAN,
post_mkc11_STAN = post_mkc11_STAN
)
}
# Use map_dfr to apply the function over all unique file_dir and combine results
results_df <- purrr::map_dfr(unique(selected_signal_sub$file_dir),
run_stan_model,
data = selected_signal_sub)
View(results_df)
line(results_df$post_mmc_STAN)
plot(results_df$post_mmc_STAN)
plot(results_df$post_mkc11_STAN)
