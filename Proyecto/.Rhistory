directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
csv_files
library(dplyr)
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
combined_data <- csv_files %>%
lapply(function(file) {
# Leer el archivo CSV
data <- read.csv(file)
# Reorganizar las columnas según map_dir
ordered_data <- data %>%
select(all_of(unname(map_dir)))
return(ordered_data)
}) %>%
bind_rows()
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
combined_data <- csv_files %>%
lapply(function(file) {
# Leer el archivo CSV
data <- read.csv(file)
# Reorganizar las columnas según map_dir
ordered_data <- data %>%
select(all_of(names(map_dir)))
return(ordered_data)
}) %>%
bind_rows()
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
for file in csv_files:
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
for (file in csv_files){
df <- read.csv(file)
df <- df %>% select(all_of(names(map_dir)))
df <- df %>% rename_all(~map_dir[.])
}
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
data <- list()
for (file in csv_files){
df <- read.csv(file)
df <- df %>% rename(!!!map_dir)
df$file_path <- file
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
data <- list()
for (file in csv_files){
df <- read.csv(file)
df$file_path <- file
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
data <- list()
for (file in csv_files){
df <- read.csv(file, col_names = TRUE)
df$file_path <- file
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
data <- list()
for (file in csv_files){
df <- read_csv(file, col_names = TRUE)
df$file_path <- file
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
library(tidyverse)
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
data <- list()
for (file in csv_files){
df <- read_csv(file, col_names = TRUE)
df$file_path <- file
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
map_dir <- list(
time = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'IqAx1',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'IqAx2',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'IqAx3',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'IqAx4',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'pos1stEncAx1',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'pos1stEncAx2',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'pos1stEncAx3',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'pos1stEncAx4',
'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Channel/!RP/rpa [u1; 15]' = 'R5'
)
data <- list()
for (file in csv_files){
df <- read_csv(file, col_names = TRUE, show_col_types = FALSE)
df$file_path <- file
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
View(data)
data[["data/080807_WearMillingY_50_/_erste/Trace_0912_133347.csv"]]
?rename
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, cache.lazy = FALSE)
library(tidyverse)
library(kableExtra)
options(scipen = 999)
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
column_mapping <- c(
'time' = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'torque_x',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'torque_y',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'torque_z',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'torque_spindle',
#'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
#'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
#'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
#'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
#'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
#'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'position_x',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'position_y',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'position_z',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'position_spindle',
'+/Channel/!RP/rpa [u1; 15]' = 'Recording_flag'
)
data <- list()
for (file in csv_files){
df <- read_csv(file, col_names = TRUE, show_col_types = FALSE)
# Obtener nombres de columnas presentes en el archivo y que están en el diccionario
columns_to_rename <- intersect(names(df), names(column_mapping))
# Renombrar las columnas solo si coinciden con el diccionario
if (length(columns_to_rename) > 0) {
df <- df %>%
rename_with(~ column_mapping[.x], .cols = columns_to_rename)
}
df$file_path <- file
file_path_parts <- str_split(file, "/")[[1]]
df$file_name <- file_path_parts[length(file_path_parts)]
df$file_dir <- file_path_parts[length(file_path_parts) - 1]
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, cache.lazy = FALSE)
library(tidyverse)
library(kableExtra)
options(scipen = 999)
directory_path <- "data/"
csv_files <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
column_mapping <- c(
'time' = 'time',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 1]' = 'torque_x',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 2]' = 'torque_y',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 3]' = 'torque_z',
'+/Nck/!SD/nckServoDataActCurr32 [u1; 4]' = 'torque_spindle',
#'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 1]' = 'posAx1',
#'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 2]' = 'posAx2',
#'+/Nck/!SD/nckServoDataActPos2ndEnc32 [u1; 3]' = 'posAx3',
#'+/Nck/!SD/nckServoDataActPower32 [u1; 6]' = 'PowerSp',
#'+/Nck/!SD/nckServoDataActVelMot32 [u1; 6]' = 'VelMotSp',
#'+/Nck/!SD/nckServoDataActVelMot32 [u1; 4]' = 'ActVelMot32',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 1]' = 'position_x',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 2]' = 'position_y',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 3]' = 'position_z',
'+/Nck/!SD/nckServoDataActPos1stEnc32 [u1; 4]' = 'position_spindle',
'+/Channel/!RP/rpa [u1; 15]' = 'Recording_flag'
)
data <- list()
for (file in csv_files){
df <- read_csv(file, col_names = TRUE, show_col_types = FALSE)
# Obtener nombres de columnas presentes en el archivo y que están en el diccionario
columns_to_rename <- intersect(names(df), names(column_mapping))
# Renombrar las columnas solo si coinciden con el diccionario
if (length(columns_to_rename) > 0) {
df <- df %>%
rename_with(~ column_mapping[.x], .cols = columns_to_rename)
}
df$file_path <- file
file_path_parts <- str_split(file, "/")[[1]]
df$file_name <- file_path_parts[length(file_path_parts)]
df$file_dir <- file_path_parts[length(file_path_parts) - 1]
df$time_increment <- c(0, diff(df$time))
data[[file]] <- df
}
selected_columns <- c(unname(column_mapping), "file_path", "file_dir",
"file_name", "time_increment")
combined_data <- bind_rows(data) %>%
select(any_of(selected_columns))
combined_data %>%
as.data.frame() %>%
str()
data.frame(
Faltantes = colSums(is.na(combined_data)),
Porcentaje = round(colSums(is.na(combined_data))/nrow(combined_data)*100, 2)) %>%
kable() %>%
kable_styling(font_size = 20)
clean_data <-
combined_data %>%
select(-c("torque_z", "position_x", "Recording_flag")) %>%
drop_na()
data.frame(
file_dir = unique(clean_data$file_dir)
) %>%
filter(!grepl("^Level_[0-9]{3}$", file_dir))  %>%
kable() %>%
kable_styling(font_size = 20)
clean_data <-
clean_data %>%
filter(grepl("^Level_[0-9]{3}$", file_dir)) %>%
arrange(file_dir, file_name, time)
clean_data <-
clean_data %>%
group_by(file_dir) %>%
mutate(level_time = cumsum(time_increment)) %>%
ungroup() %>%
mutate(total_time = cumsum(time_increment))
clean_data %>%
select(file_dir, level_time, total_time) %>%
as.data.frame() %>%
head() %>%
kable() %>%
kable_styling(font_size = 20)
clean_data %>%
select(file_dir, level_time, total_time) %>%
mutate(total_time = sprintf("%.3f", total_time)) %>%
as.data.frame() %>%
tail() %>%
kable() %>%
kable_styling(font_size = 20)
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle", "position_y",
"position_z", "position_spindle")) %>%
reframe(
variable = colnames(.),
min = sapply(., min, na.rm = TRUE),
Q1 = sapply(., quantile, probs = 0.25, na.rm = TRUE),
mean = colMeans(., na.rm = TRUE),
median = sapply(., median, na.rm = TRUE),
Q3 = sapply(., quantile, probs = 0.75, na.rm = TRUE),
max = sapply(., max, na.rm = TRUE),
sd = sapply(., sd, na.rm = TRUE)) %>%
mutate_if(is.numeric, round, 2) %>%
as.data.frame() %>%
kable() %>%
kable_styling(font_size = 20)
prueba <- clean_data %>% skimr::skim()
View(prueba)
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle", "position_y",
"position_z", "position_spindle")) %>%
skimr::skim()
stats <-
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle", "position_y",
"position_z", "position_spindle")) %>%
skimr::skim()
stats %>%
as.data.frame() %>%
kable() %>%
kable_styling(font_size = 20)
View(stats)
stats %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
mutate_if(is.numeric, round, 2) %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
mutate_if(is.numeric, round, 2) %>%
rename_with(~ gsub("^numeric\\.", "", .), starts_with("numeric.")) %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
mutate_if(is.numeric, round, 2) %>%
rename_with(~ gsub("^numeric\\.", "", .), starts_with("numeric.")) %>%
rename(skim_variable = variable) %>%
kable() %>%
kable_styling(font_size = 20)
stats %>%
select(skim_variable, starts_with("numeric.")) %>%
mutate_if(is.numeric, round, 2) %>%
rename_with(~ gsub("^numeric\\.", "", .), starts_with("numeric.")) %>%
rename(variable = skim_variable) %>%
kable() %>%
kable_styling(font_size = 20)
library(skimr)
stats <-
clean_data %>%
select(c("torque_x", "torque_y", "torque_spindle", "position_y",
"position_z", "position_spindle")) %>%
skim()
glimpse(combined_data)
prueba <- glimpse(combined_data)
View(prueba)
combined_data %>%
glimpse() %>%
head()
combined_data %>%
glimpse() %>%
head()
prueba <- combined_data %>%
str()
prueba <- combined_data %>%
str()
combined_data %>%
as.data.frame() %>%
str()
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, cache.lazy = FALSE)
library(tidyverse)
library(kableExtra)
library(skimr)
options(scipen = 999)
